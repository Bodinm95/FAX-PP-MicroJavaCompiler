program SemanticProgram
	const int N = 10;
	int global;
	bool flag;

	class Math {
		int PI;
		Math funcArray[];
		{
			void sum(int a, int b)
				int ret;
				int arr[];
			{
				// Designator test //
				ret = temp;         // Undeclared symbol error
				ret = N;            // Symbolic constant detected
				ret = global;       // Global variable detected
				ret = ret;          // Local variable detected
				ret = a;            // Formal argument detected
				ret = PI;           // Field detected
				ret = funcArray[2]; // Field array detected

				ret = a[10];        // not an array error
				ret = arr[true];    // index type error
				ret = arr[10];      // array element access detected
			}
		}
	}
{
	void out(int num){ }

	void main()
		int array[];
		int num;
		Math math;
		int foo;
	{
		// Factor, Term and Expression test //
		array = new int['A'];    // size type error
		array = new asd[10];     // type error
		array = new int[10];     // array creation

		math = new int;      // not a class error
		math = new Math;     // object creation

		num = int();             // not a function error
		num = out(10);           // global function call
		num = Math.sum(1, 2);    // method call

		num = 10 + 'A';    // addop arithmetic type error
		num = 10 * 'A';    // mulop arithmetic type error
		num = - 'A';       // negative expression type error


		// Condition test //
		if (10 < 'A') return;         // incompatible comparison types error
		if (math >= math) return;    // invalid relational operator error


		// Designator test //
		foo = num.PI;                        // not a class type error
		foo = Math.E;                        // not a class field error
		foo = Math.PI;                       // class field access detected
		foo = math.funcArray[5].sum(1, 2);   // multiple class field and array access


		// Designator Statement test //
		array++;    // invalid designator kind error
		flag--;     // must be type int error
		array[2]++;

		bool();            // statement not a function error
		out(10);           // statement global function call
		Math.sum(1, 2);    // statement method call

		array = 10;        // assignment designator kind error
		array[2] = true;   // invalid type assignment
	}
}