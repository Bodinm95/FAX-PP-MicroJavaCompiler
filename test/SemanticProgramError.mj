program SemanticProgram

	// Constant test //
	const int N = 10;     // num constant declared
	const bool B = true;  // bool constant declared
	const char C = 'A';   // char constant declared

	const int N = 10;   // already defined error
	const int X = true; // expected bool error
	const int Y = 'A';  // expected char error
	const bool Z = 10;  // expected int error

	// Variable test //
	int global;  // global variable declared
	bool flag;

	class Math {
		int PI;
		Math funcArray[];  // Field declared
		{
			int sum(int a, int b)

				// Variable test // 
				int ret;    // local variable declared
				int arr[];  // local array declared
				int ret;    // already defined error
			{

				// Designator test //
				ret = temp;         // Undeclared symbol error
				ret = N;            // Symbolic constant detected
				ret = global;       // Global variable detected
				ret = ret;          // Local variable detected
				ret = a;            // Formal argument detected
				ret = PI;           // Field detected
				ret = funcArray[2]; // Field array detected

				ret = a[10];        // not an array error
				ret = arr[true];    // index type error
				ret = arr[10];      // array element access detected

				return ret;
			}


			// Method test //
			asd sum(int a, dsa b) {    // type error
				ret = 10 + b;          // symbol already defined error
				return;                // formal argument error
			}
		}
	}

	// Class Test //
	class Math { { } }  // already defined error
{

	// Statement test //
	void out(int num){
		return 10;                  // void return error
	}
	int foo1(){ }                   // return missing error
	int foo2(){ return; }           // must return type error
	int foo3(){ return true; }      // incompatible return type error
	int foo4(){ return 1 + 'A'; }   // invalid return expression error

	void main()
		int array[];
		int num;
		Math math;
		int foo;
	{
		// Factor, Term and Expression test //
		array = new int['A'];    // size type error
		array = new asd[10];     // type error
		array = new int[10];     // array creation

		math = new int;      // not a class error
		math = new Math;     // object creation

		num = int();             // not a function error
		num = out(10);           // global function call
		num = Math.sum(1, 2);    // method call

		num = 10 + 'A';    // addop arithmetic type error
		num = 10 * 'A';    // mulop arithmetic type error
		num = - 'A';       // negative expression type error


		// Condition test //
		if (10 < 'A') return;         // incompatible comparison types error
		if (math >= math) return;    // invalid relational operator error


		// Designator test //
		foo = num.PI;                        // not a class type error
		foo = Math.E;                        // not a class field error
		foo = Math.PI;                       // class field access detected
		foo = math.funcArray[5].sum(1, 2);   // multiple class field and array access


		// Designator Statement test //
		array++;    // invalid designator kind error
		flag--;     // must be type int error
		array[2]++;

		bool();            // statement not a function error
		out(10);           // statement global function call
		Math.sum(1, 2);    // statement method call

		array = 10;        // assignment designator kind error
		array[2] = true;   // invalid type assignment


		// Actual Parameters test //
		Math.sum(1, 2, 3);    // different number of parameters error
		Math.sum(1, 'A');     // parameter mismatch error


		// Statement test //
		print(array);         // invalid print type error
		print(array, 10);

		read(array);                // read designator kind error
		read(math.funcArray[0]);    // invalid read type error

		do { do { continue; } while (true); break; } while (true);
		break;           // break error
		continue;        // continue error
	}
}