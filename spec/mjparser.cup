package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;

import rs.ac.bg.etf.pp1.ast.*;
import java.lang.reflect.Field;

parser code {:

	int error = 0;

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}

	public void syntax_error(Symbol cur_token) {
		report_error("Syntax error", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		report_fatal_error("Fatal error, parsing cannot be continued", cur_token);
	}

	public void report_error(String message, Object info) {
		error++;
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol && ((Symbol)info).value != null)
			msg.append(" '" + ((Symbol)info).value.toString() + "'").append(" on line:").append(((Symbol)info).left);
		System.err.println(msg.toString());
	}

	public void report_info(String message, Object info) {
		StringBuilder msg = new StringBuilder(message); 
		if (info instanceof Symbol && ((Symbol)info).value != null)
			msg.append(" '" + ((Symbol)info).value.toString() + "'").append(" on line:").append(((Symbol)info).left);
		System.out.println(msg.toString());
	}

	public String symbolName(int id) {
		Field[] fields = sym.class.getDeclaredFields();
		try {
			for (int i = 0; i < fields.length; i++)
				if (fields[i].getInt(null) == id)
					return fields[i].getName();
		} 
		catch (Exception e) { e.printStackTrace(); };
		return null;
	}
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		System.out.println(s.left + ": " + symbolName(s.sym) + " " + s.toString() + "		" + s.value.toString());
	return s;
:}

terminal PROGRAM, CLASS, EXTENDS, IF, ELSE, DO, WHILE, NEW, PRINT, READ, VOID;
terminal ADD, SUB, MUL, DIV, MOD, EQ, NEQ, GR, GREQ, LS, LSEQ, AND, OR, ASSIGN, INC, DEC;
terminal SEMI, COMMA, DOT;
terminal LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE;
terminal CONST;
terminal String RETURN, BREAK, CONTINUE;

terminal Integer NUM;
terminal Character CHAR;
terminal String BOOL;
terminal String IDENT;

nonterminal Prog;
nonterminal ProgId;

nonterminal DeclList;
nonterminal DeclPart;

nonterminal ConstDecl;
nonterminal ConstDeclList;
nonterminal ConstDeclPart;

nonterminal VarDecl;
nonterminal VarDeclList;
nonterminal VarDeclPart;
nonterminal ListVarDecl;

nonterminal ClassDecl;
nonterminal ClassId;
nonterminal ExtendsDecl;
nonterminal ClassMethodDecl;

nonterminal MethodDeclList;
nonterminal MethodDecl;
nonterminal MethodSign;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodId;
nonterminal RetType;
nonterminal FormPars;
nonterminal FormParsList;
nonterminal FormParsPart;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;

nonterminal StmtList;
nonterminal Stmt;
nonterminal DoStmt;
nonterminal ElseOpt;
nonterminal RetOpt;
nonterminal PrintOpt;

nonterminal DesignatorStatement;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal ArrayDesignator;
nonterminal ActPars;
nonterminal ActParsList;

nonterminal Cond;
nonterminal CondTerm;
nonterminal CondFact;
nonterminal Condition;
nonterminal And;
nonterminal Or;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ExprList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;

nonterminal Relop;
nonterminal Addop;
nonterminal Mulop;

precedence left ELSE;

// ------------------------------------------------- //

Prog ::= (Program) PROGRAM ProgId DeclList LBRACE MethodDeclList RBRACE;

ProgId ::= (ProgramId) IDENT:name;

// ------------------------------------------------- //

DeclList ::= (DeclarationList) DeclList DeclPart
          |  (EmptyDeclarationList) /* epsilon */;

DeclPart ::= (DeclarationPartConst) ConstDecl
          |  (DeclarationPartVar) VarDecl
          |  (DeclarationPartClass) ClassDecl;

// ------------------------------------------------- //

ConstDecl ::= (ConstDeclaration) CONST Type ConstDeclList SEMI;

ConstDeclList ::= (ConstDeclarationList) ConstDeclList COMMA ConstDeclPart
               |  (SingleConstDeclaration) ConstDeclPart;

ConstDeclPart ::= (ConstDeclarationNum) IDENT:name ASSIGN NUM:value
               |  (ConstDeclarationChar) IDENT:name ASSIGN CHAR:value
               |  (ConstDeclarationBool) IDENT:name ASSIGN BOOL:value;

// ------------------------------------------------- //

VarDecl ::= (VarDeclaration) Type VarDeclList SEMI
         |  (ErrorVarDeclaration) error SEMI;

VarDeclList ::= (VarDeclarationList) VarDeclList COMMA VarDeclPart
             |  (SingleVarDeclaration) VarDeclPart;

VarDeclPart ::= (VarDeclarationPart) IDENT:name
             |  (VarDeclarationPartArray) IDENT:name LSQUARE RSQUARE
             |  (ErrorVarDeclarationPart) error;

ListVarDecl ::= (ListVarDeclaration) ListVarDecl VarDecl
             |  (EmptyListVarDeclaration) /* epsilon */;

// ------------------------------------------------- //

ClassDecl ::= (ClassDeclaration) CLASS ClassId ExtendsDecl LBRACE ListVarDecl ClassMethodDecl RBRACE;

ClassId ::= (ClassId) IDENT:name;

ExtendsDecl ::= (ExtendsDeclaration) EXTENDS Type
             |  (EmptyExtendsDeclaration) /* epsilon */
             |  (ErrorExtendsDeclaration) error;

ClassMethodDecl ::= (ClassMethodDeclaration) LBRACE MethodDeclList RBRACE
                 |  (EmptyClassMethodDeclaration) /* epsilon */;

// ------------------------------------------------- //

MethodDeclList ::= (MethodDeclarationList) MethodDeclList MethodDecl
                |  (EmptyMethodDeclarationList) /* epsilon */;

MethodDecl ::= (MethodDeclaration) MethodSign ListVarDecl LBRACE StmtList RBRACE;

MethodSign ::= (MethodSignature) RetType MethodId LPAREN FormPars RPAREN;

MethodId ::= (MethodId) IDENT:name;

RetType ::= (ReturnType) Type
         |  (ReturnTypeVoid) VOID;

FormPars ::= (FormalParams) FormParsList
          |  (EmptyFormalParams) /* epsilon */;

FormParsList ::= (FormalParamList) FormParsList COMMA FormParsPart
              |  (SingleFormalParam) FormParsPart;

FormParsPart ::= (FormalParamPart) Type IDENT:name
              |  (FormalParamPartArray) Type IDENT:name LSQUARE RSQUARE
              |  (ErrorFormalParamPart) error;

Type ::= (Type) IDENT:name;
	
// ------------------------------------------------- //

StmtList ::= (StatementList) StmtList Stmt
          |  (EmptyStatementList) /* epsilon */;

Stmt ::= (Statement) DesignatorStatement SEMI
      |  (IfStatement) IF LPAREN Condition RPAREN Stmt ElseOpt
      |  (WhileStatement) DoStmt Stmt WHILE LPAREN Condition RPAREN SEMI
      |  (BreakStatement) BREAK SEMI
      |  (ContinueStatement) CONTINUE SEMI
      |  (ReturnStatement) RETURN RetOpt SEMI
      |  (ReadStatement) READ LPAREN Designator RPAREN SEMI
      |  (PrintStatement) PRINT LPAREN Expr PrintOpt RPAREN SEMI
      |  (BlockStatement) LBRACE StmtList RBRACE;

DoStmt ::= (DoStatement) DO;

ElseOpt ::= (ElseOption) ELSE Stmt
         |  (EmptyElseOption) /* epsilon */;

RetOpt ::= (ReturnOption) Expr
        |  (EmptyReturnOption) /* epsilon */;

PrintOpt ::= (PrintOption) COMMA NUM:value
          |  (EmptyPrintOption) /* epsilon */;

// ------------------------------------------------- //

DesignatorStatement ::= (Assignment) Designator ASSIGN Expr
                     |  (ErrorAssignment) Designator ASSIGN error
                     |  (ProcCall) Designator LPAREN ActPars RPAREN
                     |  (Increment) Designator INC
                     |  (Decrement) Designator DEC;

Designator ::= (DesignatorField) Designator DOT IDENT:name
            |  (DesignatorArray) ArrayDesignator LSQUARE Expr RSQUARE
            |  (DesignatorIdent) IDENT:name;

ArrayDesignator ::= (ArrayDesignator) Designator;

ActPars ::= (ActualParams) ActParsList
         |  (EmptyActualParams) /* epsilon */;

ActParsList ::= (ActualParamsList) ActParsList COMMA Expr
             |  (SingleActualParam) Expr;

// ------------------------------------------------- //

Condition ::= (Condition) Cond;

Cond ::= (Conditions) Cond Or CondTerm
      |  (SingleCondition) CondTerm;

Or ::= (Or) OR;

CondTerm ::= (ConditionTerms) CondTerm And CondFact
          |  (SingleConditionTerm) CondFact;

And ::= (And) AND;

CondFact ::= (ConditionFact) Expr
          |  (ConditionFactRelop) Expr Relop Expr
          |  (ErrorConditionFact) error;

// ------------------------------------------------- //

Expr ::= (Expressions) ExprList
      |  (NegExpresions) SUB ExprList;

ExprList ::= (ExpressionList) ExprList Addop Term
          |  (SingleExpression) Term;

Term ::= (TermList) Term Mulop Factor
      |  (SingleTerm) Factor;

Factor ::= (FactorDesignator) Designator
        |  (FactorProcCall) Designator LPAREN ActPars RPAREN
        |  (FactorNum) NUM:value
        |  (FactorChar) CHAR:value
        |  (FactorBool) BOOL:value
        |  (FactorNew) NEW Type
        |  (FactorNewArray) NEW Type LSQUARE Expr RSQUARE
        |  (FactorExpression) LPAREN Expr RPAREN;

// ------------------------------------------------- //

Relop ::= (RelopEQ) EQ
       |  (RelopNEQ) NEQ
       |  (RelopGR) GR
       |  (RelopGREQ) GREQ
       |  (RelopLS) LS
       |  (RelopLSEQ) LSEQ;

Addop ::= (AddopAdd) ADD
       |  (AddopSub) SUB;

Mulop ::= (MulopMul) MUL
       |  (MulopDiv) DIV
       |  (MulopMod) MOD;
