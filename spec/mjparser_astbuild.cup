package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;

import rs.ac.bg.etf.pp1.ast.*;
import java.lang.reflect.Field;

parser code {:

	int error = 0;

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}

	public void syntax_error(Symbol cur_token) {
		report_error("Syntax error", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		report_fatal_error("Fatal error, parsing cannot be continued", cur_token);
	}

	public void report_error(String message, Object info) {
		error++;
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol && ((Symbol)info).value != null)
			msg.append(" '" + ((Symbol)info).value.toString() + "'").append(" on line:").append(((Symbol)info).left);
		System.err.println(msg.toString());
	}

	public void report_info(String message, Object info) {
		StringBuilder msg = new StringBuilder(message); 
		if (info instanceof Symbol && ((Symbol)info).value != null)
			msg.append(" '" + ((Symbol)info).value.toString() + "'").append(" on line:").append(((Symbol)info).left);
		System.out.println(msg.toString());
	}

	public String symbolName(int id) {
		Field[] fields = sym.class.getDeclaredFields();
		try {
			for (int i = 0; i < fields.length; i++)
				if (fields[i].getInt(null) == id)
					return fields[i].getName();
		} 
		catch (Exception e) { e.printStackTrace(); };
		return null;
	}
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		System.out.println(s.left + ": " + symbolName(s.sym) + " " + s.toString() + "		" + s.value.toString());
	return s;
:}

terminal PROGRAM, CLASS, EXTENDS, IF, ELSE, DO, WHILE, NEW, PRINT, READ, VOID;
terminal ADD, SUB, MUL, DIV, MOD, EQ, NEQ, GR, GREQ, LS, LSEQ, AND, OR, ASSIGN, INC, DEC;
terminal SEMI, COMMA, DOT;
terminal LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE;
terminal CONST;
terminal String RETURN, BREAK, CONTINUE;

terminal Integer NUM;
terminal Character CHAR;
terminal String BOOL;
terminal String IDENT;

nonterminal Prog Prog;
nonterminal ProgId ProgId;

nonterminal DeclList DeclList;
nonterminal DeclPart DeclPart;

nonterminal ConstDecl ConstDecl;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDeclPart ConstDeclPart;

nonterminal VarDecl VarDecl;
nonterminal VarDeclList VarDeclList;
nonterminal VarDeclPart VarDeclPart;
nonterminal ListVarDecl ListVarDecl;

nonterminal ClassDecl ClassDecl;
nonterminal ClassId ClassId;
nonterminal ExtendsDecl ExtendsDecl;
nonterminal ClassMethodDecl ClassMethodDecl;

nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal MethodSign MethodSign;
nonterminal MethodId MethodId;
nonterminal RetType RetType;
nonterminal FormPars FormPars;
nonterminal FormParsList FormParsList;
nonterminal FormParsPart FormParsPart;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;

nonterminal StmtList StmtList;
nonterminal Stmt Stmt;
nonterminal DoStmt DoStmt;
nonterminal ElseOpt ElseOpt;
nonterminal RetOpt RetOpt;
nonterminal PrintOpt PrintOpt;

nonterminal DesignatorStatement DesignatorStatement;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal ActPars ActPars;
nonterminal ActParsList ActParsList;

nonterminal Cond Cond;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ExprList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;

nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;

precedence left ELSE;

// ------------------------------------------------- //

Prog ::= (Program) PROGRAM ProgId:P1 DeclList:D2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :};

ProgId ::= (ProgramId) IDENT:name {: RESULT=new ProgramId(name); RESULT.setLine(nameleft); :};

// ------------------------------------------------- //

DeclList ::= (DeclarationList) DeclList:D1 DeclPart:D2 {: RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); :}
          |  (EmptyDeclarationList) {: RESULT=new EmptyDeclarationList(); :} /* epsilon */;

DeclPart ::= (DeclarationPartConst) ConstDecl:C1 {: RESULT=new DeclarationPartConst(C1); RESULT.setLine(C1left); :}
          |  (DeclarationPartVar) VarDecl:V1 {: RESULT=new DeclarationPartVar(V1); RESULT.setLine(V1left); :}
          |  (DeclarationPartClass) ClassDecl:C1 {: RESULT=new DeclarationPartClass(C1); RESULT.setLine(C1left); :};

// ------------------------------------------------- //

ConstDecl ::= (ConstDeclaration) CONST Type:T1 ConstDeclList:C2 SEMI {: RESULT=new ConstDeclaration(T1, C2); RESULT.setLine(T1left); :};

ConstDeclList ::= (ConstDeclarationList) ConstDeclList:C1 COMMA ConstDeclPart:C2 {: RESULT=new ConstDeclarationList(C1, C2); RESULT.setLine(C1left); :}
               |  (SingleConstDeclaration) ConstDeclPart:C1 {: RESULT=new SingleConstDeclaration(C1); RESULT.setLine(C1left); :};

ConstDeclPart ::= (ConstDeclarationNum) IDENT:name ASSIGN NUM:value {: RESULT=new ConstDeclarationNum(name, value); RESULT.setLine(nameleft); :}
               |  (ConstDeclarationChar) IDENT:name ASSIGN CHAR:value {: RESULT=new ConstDeclarationChar(name, value); RESULT.setLine(nameleft); :}
               |  (ConstDeclarationBool) IDENT:name ASSIGN BOOL:value {: RESULT=new ConstDeclarationBool(name, value); RESULT.setLine(nameleft); :};

// ------------------------------------------------- //

VarDecl ::= (VarDeclaration) Type:T1 VarDeclList:V2 SEMI {: RESULT=new VarDeclaration(T1, V2); RESULT.setLine(T1left); :}
         |  (ErrorVarDeclaration) error SEMI {: RESULT=new ErrorVarDeclaration(); :};

VarDeclList ::= (VarDeclarationList) VarDeclList:V1 COMMA VarDeclPart:V2 {: RESULT=new VarDeclarationList(V1, V2); RESULT.setLine(V1left); :}
             |  (SingleVarDeclaration) VarDeclPart:V1 {: RESULT=new SingleVarDeclaration(V1); RESULT.setLine(V1left); :};

VarDeclPart ::= (VarDeclarationPart) IDENT:name {: RESULT=new VarDeclarationPart(name); RESULT.setLine(nameleft); :}
             |  (VarDeclarationPartArray) IDENT:name LSQUARE RSQUARE {: RESULT=new VarDeclarationPartArray(name); RESULT.setLine(nameleft); :}
             |  (ErrorVarDeclarationPart) error {: RESULT=new ErrorVarDeclarationPart(); :};

ListVarDecl ::= (ListVarDeclaration) ListVarDecl:L1 VarDecl:V2 {: RESULT=new ListVarDeclaration(L1, V2); RESULT.setLine(L1left); :}
             |  (EmptyListVarDeclaration) {: RESULT=new EmptyListVarDeclaration(); :} /* epsilon */;

// ------------------------------------------------- //

ClassDecl ::= (ClassDeclaration) CLASS ClassId:C1 ExtendsDecl:E2 LBRACE ListVarDecl:L3 ClassMethodDecl:C4 RBRACE {: RESULT=new ClassDeclaration(C1, E2, L3, C4); RESULT.setLine(C1left); :};

ClassId ::= (ClassId) IDENT:name {: RESULT=new ClassId(name); RESULT.setLine(nameleft); :};

ExtendsDecl ::= (ExtendsDeclaration) EXTENDS Type:T1 {: RESULT=new ExtendsDeclaration(T1); RESULT.setLine(T1left); :}
             |  (EmptyExtendsDeclaration) {: RESULT=new EmptyExtendsDeclaration(); :} /* epsilon */
             |  (ErrorExtendsDeclaration) error {: RESULT=new ErrorExtendsDeclaration(); :};

ClassMethodDecl ::= (ClassMethodDeclaration) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new ClassMethodDeclaration(M1); RESULT.setLine(M1left); :}
                 |  (EmptyClassMethodDeclaration) {: RESULT=new EmptyClassMethodDeclaration(); :} /* epsilon */;

// ------------------------------------------------- //

MethodDeclList ::= (MethodDeclarationList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationList(M1, M2); RESULT.setLine(M1left); :}
                |  (EmptyMethodDeclarationList) {: RESULT=new EmptyMethodDeclarationList(); :} /* epsilon */;

MethodDecl ::= (MethodDeclaration) MethodSign:M1 ListVarDecl:L2 LBRACE StmtList:S3 RBRACE {: RESULT=new MethodDeclaration(M1, L2, S3); RESULT.setLine(M1left); :};

MethodSign ::= (MethodSignature) RetType:R1 MethodId:M2 LPAREN FormPars:F3 RPAREN {: RESULT=new MethodSignature(R1, M2, F3); RESULT.setLine(R1left); :};

MethodId ::= (MethodId) IDENT:name {: RESULT=new MethodId(name); RESULT.setLine(nameleft); :};

RetType ::= (ReturnType) Type:T1 {: RESULT=new ReturnType(T1); RESULT.setLine(T1left); :}
         |  (ReturnTypeVoid) VOID {: RESULT=new ReturnTypeVoid(); :};

FormPars ::= (FormalParams) FormParsList:F1 {: RESULT=new FormalParams(F1); RESULT.setLine(F1left); :}
          |  (EmptyFormalParams) {: RESULT=new EmptyFormalParams(); :} /* epsilon */;

FormParsList ::= (FormalParamList) FormParsList:F1 COMMA FormParsPart:F2 {: RESULT=new FormalParamList(F1, F2); RESULT.setLine(F1left); :}
              |  (SingleFormalParam) FormParsPart:F1 {: RESULT=new SingleFormalParam(F1); RESULT.setLine(F1left); :};

FormParsPart ::= (FormalParamPart) Type:T1 IDENT:name {: RESULT=new FormalParamPart(T1, name); RESULT.setLine(T1left); :}
              |  (FormalParamPartArray) Type:T1 IDENT:name LSQUARE RSQUARE {: RESULT=new FormalParamPartArray(T1, name); RESULT.setLine(T1left); :}
              |  (ErrorFormalParamPart) error {: RESULT=new ErrorFormalParamPart(); :};

Type ::= (Type) IDENT:name {: RESULT=new Type(name); RESULT.setLine(nameleft); :};
	
// ------------------------------------------------- //

StmtList ::= (StatementList) StmtList:S1 Stmt:S2 {: RESULT=new StatementList(S1, S2); RESULT.setLine(S1left); :}
          |  (EmptyStatementList) {: RESULT=new EmptyStatementList(); :} /* epsilon */;

Stmt ::= (Statement) DesignatorStatement:D1 SEMI {: RESULT=new Statement(D1); RESULT.setLine(D1left); :}
      |  (IfStatement) IF LPAREN Cond:C1 RPAREN Stmt:S2 ElseOpt:E3 {: RESULT=new IfStatement(C1, S2, E3); RESULT.setLine(C1left); :}
      |  (WhileStatement) DoStmt:D1 Stmt:S2 WHILE LPAREN Cond:C3 RPAREN SEMI {: RESULT=new WhileStatement(D1, S2, C3); RESULT.setLine(D1left); :}
      |  (BreakStatement) BREAK:B1 SEMI {: RESULT=new BreakStatement(B1); RESULT.setLine(B1left); :}
      |  (ContinueStatement) CONTINUE:C1 SEMI {: RESULT=new ContinueStatement(C1); RESULT.setLine(C1left); :}
      |  (ReturnStatement) RETURN:R1 RetOpt:R2 SEMI {: RESULT=new ReturnStatement(R1, R2); RESULT.setLine(R1left); :}
      |  (ReadStatement) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
      |  (PrintStatement) PRINT LPAREN Expr:E1 PrintOpt:P2 RPAREN SEMI {: RESULT=new PrintStatement(E1, P2); RESULT.setLine(E1left); :}
      |  (BlockStatement) LBRACE StmtList:S1 RBRACE {: RESULT=new BlockStatement(S1); RESULT.setLine(S1left); :};

DoStmt ::= (DoStatement) DO {: RESULT=new DoStatement(); :};

ElseOpt ::= (ElseOption) ELSE Stmt:S1 {: RESULT=new ElseOption(S1); RESULT.setLine(S1left); :}
         |  (EmptyElseOption) {: RESULT=new EmptyElseOption(); :} /* epsilon */;

RetOpt ::= (ReturnOption) Expr:E1 {: RESULT=new ReturnOption(E1); RESULT.setLine(E1left); :}
        |  (EmptyReturnOption) {: RESULT=new EmptyReturnOption(); :} /* epsilon */;

PrintOpt ::= (PrintOption) COMMA NUM:N1 {: RESULT=new PrintOption(N1); RESULT.setLine(N1left); :}
          |  (EmptyPrintOption) {: RESULT=new EmptyPrintOption(); :} /* epsilon */;

// ------------------------------------------------- //

DesignatorStatement ::= (Assignment) Designator:D1 ASSIGN Expr:E2 {: RESULT=new Assignment(D1, E2); RESULT.setLine(D1left); :}
                     |  (ErrorAssignment) Designator:D1 ASSIGN error {: RESULT=new ErrorAssignment(D1); RESULT.setLine(D1left); :}
                     |  (ProcCall) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new ProcCall(D1, A2); RESULT.setLine(D1left); :}
                     |  (Increment) Designator:D1 INC {: RESULT=new Increment(D1); RESULT.setLine(D1left); :}
                     |  (Decrement) Designator:D1 DEC {: RESULT=new Decrement(D1); RESULT.setLine(D1left); :};

Designator ::= (DesignatorField) Designator:D1 DOT IDENT:name {: RESULT=new DesignatorField(D1, name); RESULT.setLine(D1left); :}
            |  (DesignatorArray) Designator:D1 LSQUARE Expr:E2 RSQUARE {: RESULT=new DesignatorArray(D1, E2); RESULT.setLine(D1left); :}
            |  (DesignatorIdent) IDENT:name {: RESULT=new DesignatorIdent(name); RESULT.setLine(nameleft); :};

ActPars ::= (ActualParams) ActParsList:A1 {: RESULT=new ActualParams(A1); RESULT.setLine(A1left); :}
         |  (EmptyActualParams) {: RESULT=new EmptyActualParams(); :} /* epsilon */;

ActParsList ::= (ActualParamsList) ActParsList:A1 COMMA Expr:E2 {: RESULT=new ActualParamsList(A1, E2); RESULT.setLine(A1left); :}
             |  (SingleActualParam) Expr:E1 {: RESULT=new SingleActualParam(E1); RESULT.setLine(E1left); :};

// ------------------------------------------------- //

Cond ::= (Conditions) Cond:C1 OR CondTerm:C2 {: RESULT=new Conditions(C1, C2); RESULT.setLine(C1left); :}
      |  (SingleCondition) CondTerm:C1 {: RESULT=new SingleCondition(C1); RESULT.setLine(C1left); :};

CondTerm ::= (ConditionTerms) CondTerm:C1 AND CondFact:C2 {: RESULT=new ConditionTerms(C1, C2); RESULT.setLine(C1left); :}
          |  (SingleConditionTerm) CondFact:C1 {: RESULT=new SingleConditionTerm(C1); RESULT.setLine(C1left); :};

CondFact ::= (ConditionFact) Expr:E1 {: RESULT=new ConditionFact(E1); RESULT.setLine(E1left); :}
          |  (ConditionFactRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new ConditionFactRelop(E1, R2, E3); RESULT.setLine(E1left); :}
          |  (ErrorConditionFact) error {: RESULT=new ErrorConditionFact(); :};

// ------------------------------------------------- //

Expr ::= (Expressions) ExprList:E1 {: RESULT=new Expressions(E1); RESULT.setLine(E1left); :}
      |  (NegExpresions) SUB ExprList:E1 {: RESULT=new NegExpresions(E1); RESULT.setLine(E1left); :};

ExprList ::= (ExpressionList) ExprList:E1 Addop:A2 Term:T3 {: RESULT=new ExpressionList(E1, A2, T3); RESULT.setLine(E1left); :}
          |  (SingleExpression) Term:T1 {: RESULT=new SingleExpression(T1); RESULT.setLine(T1left); :};

Term ::= (TermList) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermList(T1, M2, F3); RESULT.setLine(T1left); :}
      |  (SingleTerm) Factor:F1 {: RESULT=new SingleTerm(F1); RESULT.setLine(F1left); :};

Factor ::= (FactorDesignator) Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :}
        |  (FactorProcCall) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactorProcCall(D1, A2); RESULT.setLine(D1left); :}
        |  (FactorNum) NUM:value {: RESULT=new FactorNum(value); RESULT.setLine(valueleft); :}
        |  (FactorChar) CHAR:value {: RESULT=new FactorChar(value); RESULT.setLine(valueleft); :}
        |  (FactorBool) BOOL:value {: RESULT=new FactorBool(value); RESULT.setLine(valueleft); :}
        |  (FactorNew) NEW Type:T1 {: RESULT=new FactorNew(T1); RESULT.setLine(T1left); :}
        |  (FactorNewArray) NEW Type:T1 LSQUARE Expr:E2 RSQUARE {: RESULT=new FactorNewArray(T1, E2); RESULT.setLine(T1left); :}
        |  (FactorExpression) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpression(E1); RESULT.setLine(E1left); :};

// ------------------------------------------------- //

Relop ::= (RelopEQ) EQ {: RESULT=new RelopEQ(); :}
       |  (RelopNEQ) NEQ {: RESULT=new RelopNEQ(); :}
       |  (RelopGR) GR {: RESULT=new RelopGR(); :}
       |  (RelopGREQ) GREQ {: RESULT=new RelopGREQ(); :}
       |  (RelopLS) LS {: RESULT=new RelopLS(); :}
       |  (RelopLSEQ) LSEQ {: RESULT=new RelopLSEQ(); :};

Addop ::= (AddopAdd) ADD {: RESULT=new AddopAdd(); :}
       |  (AddopSub) SUB {: RESULT=new AddopSub(); :};

Mulop ::= (MulopMul) MUL {: RESULT=new MulopMul(); :}
       |  (MulopDiv) DIV {: RESULT=new MulopDiv(); :}
       |  (MulopMod) MOD {: RESULT=new MulopMod(); :};
